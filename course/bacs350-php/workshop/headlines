01:     Lesson 1 - Intermediate Web Dev
01:         LEARN
01:             Today
01:             Seaman's Rules Rule     1 - Do it simply; do it now.
01:             Literacy
01:             Literacy 50 years ago
01:             Literacy 30 years ago
01:             Literacy Today
01:             Literacy
01:             Opportunity
01:             Software Runs the World
01:             Design and Development
01:             What is BACS 350?
01:             What will you learn?
01:             Costs
01:             Grading (graded deliverables every day)
01:             Sensei Digital Classroom
01:             Rules for Success
01:             Do Not Fall Behind
01:             Today's Lesson
01:             Web Development for Small Business
01:             Internet - Clients and Servers
01:             Web Servers and Web Browsers
01:             Static Websites
01:             Database Storage
01:             New Technologies
01:         BUILD
01:             Login to Sensei Digital Classroom
01:             Buy Textbook
01:             ZyBooks Daily Readings
01:             Project     1 - Bluehost Web Hosting
01:             See you next time
02:     Lesson 2 - Server-side Includes
02:         LEARN
02:             Review
02:             Today
02:             Seaman's Rules Rule     2: Do not repeat yourself
02:             Internet - Clients and Servers
02:             Web Servers and Web Browsers
02:             Static Websites
02:             Database Storage
02:             New Technologies
02:             Technology We Know
02:             What is missing from HTML?
02:             Example: Form validation
02:             HTML is stateless
02:             PHP is Extended HTML
02:             Standard code for each page
02:             Capture common code with includes
02:             Server-side includes
02:         BUILD
02:             Every page has Header, Main, Footer
02:             Development Loop
02:             Step 1 - Create web page
02:             Test the page
02:             Step 2 - Create header.php and footer.php
02:             Step 3 - Refactor page.php
02:             Step 4 - Test the page
02:             Step 5 - Improve your header and footer
02:             Add CSS stylesheet to your header.php
02:             Download an image to use
02:             Create a banner
02:             See you next time
03:     Lesson 3 - Header/Footer Pattern
03:         LEARN
03:             Review
03:             Today
03:             Seaman's Rules Rule     3: Take small steps to move fast
03:             Github - Sample Code
03:             Pair Programming Game
03:              Variable Insertion into Views
03:              Header and Footer with Variables
03:              Header and Footer with Variables
03:              Reusable page structure
03:             Visit the Source Code
03:             See it Run
03:         BUILD
03:             Create directory structure for code
03:             Pair Programming Game
03:             Step 1 - Get Mark's sample code
03:             Step 2 - Setup Windows for Development
03:             Step 3 - Test remote page
03:             Step 4 - Change the title of the page
03:             Step 5 - Create an index page for Project 1
03:             Step 6 - Change computers & Switch players
03:             See you next time
04:     Lesson 4 -  Page Template Pattern
04:         LEARN
04:             Review
04:             Today
04:             Seaman's Rules Rule     4: Bugs breed
04:             Mark's Github Repo
04:             Hardcoded HTML
04:             Set and Use Variables
04:             Use PHP Echo
04:             Include the Template
04:         BUILD
04:             Visit the BACS Demo Server
04:             Pages Live of Servers
04:             Windows Short-cuts
04:             Copy and Paste from Browser
04:             Sign up for a Github account
04:             Fork My Repo
04:             See you next time
05:     Lesson 5 - Code Sharing
05:         LEARN
05:             Seaman's Rules Rule     5: Easy way out - hard way back
05:             Page Template Pattern
05:             PHP Functions
05:             render_page
05:             Demo Code
05:         BUILD
05:             Project     2 - Code Sharing
05:             See you next time
06:     Lesson 6 - Apache
06:         LEARN
06:             Seaman's Rules Rule     6: Test everything you care about 
06:             Project     3 - Superhero Gallery
06:             Card View Design Pattern
06:             Install XAMPP
06:         BUILD
06:         Apache Web Server
06:             Setup on Home Computer
06:             Configure Apache
06:             Configure phpMyAdmin
06:             Server Start Up
06:             Move Web Documents
06:             Setup Apache & MySQL
06:             Today
06:         Install PHP on Mac
06:             Remove the default Mac Apache (for Mojave OSX - 10.14)
06:             Create code directory
06:             Install apache with Homebrew
06:         You may not need these
06:             Edit the configuration
06:         Listen on port 80
06:         Load PHP
06:         Load Docs from here
06:            
06:             Possible values for the Options directive are "None", "All",
06:             or any combination of:
06:               Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
06:            
06:             Note that "MultiViews" must be named *explicitly* --- "Options All"
06:             doesn't give it to you.
06:            
06:             The Options directive is both complicated and important.  Please see
06:             http://httpd.apache.org/docs/2.4/mod/core.html    options
06:             for more information.
06:            
06:            
06:             AllowOverride controls what directives may be placed in .htaccess files.
06:             It can be "All", "None", or any combination of the keywords:
06:               AllowOverride FileInfo AuthConfig Limit
06:            
06:            
06:             Controls who can get stuff from this server.
06:            
06:             Start Your Web Server
06:             Test Your Web Server
06:             Hook Up Your Code
06:             See you next time
07:     Lesson 7 - Card View
07:         LEARN
07:             Seaman's Rules Rule     7: Solving problems involves learning and doing 
07:             Development Skills
07:             Skill     1 - Web Hosting
07:             Skill     2 - Windows Setup
07:             Skill     3 - Editing Code
07:             Skill     4 - Test Code with Browser
07:             Skill     5 - Setup Filezilla
07:             Skill     6 - Demo Server
07:             Skill     7 - Git Repository
07:             Card View Pattern
07:             Card View Pattern
07:         BUILD
07:             Demo With Apache
07:             Find the Docs
07:             Modify c:\\xampp\\httpdocs\\index.php
07:             See you next time
08:     Lesson 8 - Development Skills
08:         LEARN
08:             Seaman's Rules Rule     8: Crawl, Walk, Run
08:             Card View Pattern
08:         BUILD
08:         Development Skills
08:             Skill     1 - Web Hosting
08:             Skill     2 - FTP
08:             Demo Server
08:             Project Solution Examples
08:             Visit the Sensei Classroom Website
08:             See you next time




01:     Lesson 1 - Intermediate Web Dev
01:             Agenda
01:         LEARN
01:             Seaman's Rules
01:Rule     1 - Do it simply; do it now.
01:             Literacy
01:             Literacy 50 years ago
01:             Literacy 30 years ago
01:             Literacy Today
01:             Literacy
01:             Opportunity
01:             Software Runs the World
01:             Design and Development
01:             What is BACS 350?
01:             What will you learn?
01:             Costs
01:             Grading (graded deliverables every day)
01:             Sensei Digital Classroom
01:             Rules for Success
01:             Do Not Fall Behind
01:             Today's Lesson
01:             Web Development for Small Business
01:             Internet - Clients and Servers
01:             Web Servers and Web Browsers
01:             Static Websites
01:             Database Storage
01:             New Technologies
01:         BUILD
01:             Login to Sensei Digital Classroom
01:             Buy Textbook
01:             ZyBooks Daily Readings
01:             Project     1 - Bluehost Web Hosting
01:* Detailed instructions are at [Project     1 - Bluehost Web Hosting](/unc/bacs350/project/01)
02:     Lesson 2 - Server-side Includes
02:             Agenda
02:         LEARN
02:             Seaman's Rules
02:Rule     2: Do not repeat yourself
02:             Internet - Clients and Servers
02:             Web Servers and Web Browsers
02:             Static Websites
02:             Database Storage
02:             New Technologies
02:             Technology We Know
02:             What is missing from HTML?
02:             Example: Form validation
02:             HTML is stateless
02:             PHP is Extended HTML
02:             Standard code for each page
02:             Capture common code with includes
02:             Server-side includes
02:         BUILD
02:             Development Loop
02:             Step 1 - Create web page
02:             Test the page
02:             Step 2 - Create header.php and footer.php
02:             Step 3 - Refactor page.php
02:             Step 4 - Test the page
02:             Step 5 - Improve your header and footer
02:             Add CSS stylesheet to your header.php
02:             Download an image to use
02:             Create a banner
03:             Review
03:             Today's Lesson
03:             Learning Process
03:             Schedule
03:         Learn - 2:35
03:             Workflow: Edit, Test, Deploy
03:             Edit
03:             Test
03:             Deploy
03:             Test
03:         Build - 3:00
03:             Create project/03/index.php
03:        <li><a href="../01">Project     1</a></li>
03:        <li><a href="../02">Project     2</a></li>
03:        <li><a href="index.php">Project     3 - index.php</a></li>
03:        <li><a href=".">Project     3 - directory</a></li>
03:        <li><a href="page.php">Project     3 - page.php</a></li>
03:        <li><a href="Bear3.png">Project     3 - Bear Logo</a></li>
03:        <li><a href="styles.css">Project     3 - styles.css</a></li>
03:             Download an image to use
03:             Let's play with the server
03:             URL that points to directory
03:             Convert index.php to require header.php
03:             Add an echo statement
03:             Test the code
03:             Use a variable
03:             Modify header.php
03:             Modify index.php
03:    $page_title = "Project     3";
03:             Finish out a complete page
03:         Plan - 2:45
03:             PHP uses a preprocessor
03:             Understand the Preprocessor
03:             Handle HTTP Requests
03:              Includes
03:             Require
03:             error_log
03:             Variables
03:             PHP can Output HTML
03:             Modify header.php
03:             Set the Page Title
03:    $page_title = "Project     3"
03:         Share - 3:15
03:             See you next time
03:             Quiz
04:             Intro
04:             Review
04:             Today's Lesson
04:             Schedule
04:         Learn - 2:35
04:             Intro to databases
04:             What is a database?
04:             Tables are organized by rows and columns
04:             Example: Subscribers Database Table
04:             What is SQL?
04:             SQL statements
04:             MySQL
04:         Build - 3:00
04:             Bluehost Databases
04:             Database Users
04:             Subscribers User Permissions
04:             View Databases
04:             Select the "subscribers" database
04:             Create Database Table - subscribers (name, email)
04:             INSERT
04:             SELECT
04:             UPDATE
04:             DELETE
04:             Save database as SQL file
04:         Plan - 2:45
04:             Database Admin Tools
04:             Bluehost Portal
04:             Bluehost Databases
04:             Bluehost Database Users
04:             Bluehost phpMyAdmin
04:             Bluehost Select Your Database
04:             Database Structure
04:             SQL Commands
04:             Tour phpMyAdmin
04:         Share - 3:15
04:             Create project/04.php
04:             See You Next Time
05:             Intro
05:             Review
05:             Today's Lesson
05:             Schedule
05:         Learn
05:             Working with Forms
05:             Form UI
05:             Input Fields
05:             Submit Button
05:             Pushing Submit Button
05:             Collecting Data
05:             Validating Email
05:             Template for Post (send)
05:             Template for Post (receive)
05:             Template for Get (send)
05:             Template for Get (receive)
05:         Build
05:             Create file "project/05/index.php"
05:             Deploy and test
05:             Add form to page
05:             Add name and email
05:             Deploy and test
05:             Create a page "project/05/subscribe.php"
05:             Validate the email address using the filter_input
05:         Plan
05:             Basics are covered in Exercise
05:             Read PHP/MySQL book for details
05:             See You Next Time
06:             You Know ...
06:             BACS 350 Tutor
06:             Systematic Learning
06:             Today's Lesson
06:             Schedule
06:         PHP Access to Database - 2:35
06:             Save Data in Database
06:             Create Database Table - subscribers (name, email)
06:             Connect to Database
06:             Open Connection
06:             Select Statement
06:             Show Subscribers
06:             Insert Statement
06:             Variable Bindings
06:             Execute the statement
06:         Project     6 - 3:00
06:             Create project/06/index.php
06:* Add a title "BACS 350 - Project     6"
06:             Add links to "Home Page" and "Github Account"
06:             Find your database parameters using phpMyAdmin
06:             Form the DB Connection string
06:             Display DB Info
06:             Create the connection string
06:             Select Statement
06:             Show Subscribers
06:             Insert Statement
06:             Variable Bindings
06:             Execute the statement
06:             Comment Out the Insert Statement
06:             Submit project/06/index.php in Canvas
06:         Engineering Skills - 2:45
06:             Git
06:             Atlassian
06:             Github
06:             Sign up for Github Account
06:             Reading:
07:             Processing Input from Forms
07:             Next Steps
07:         Software Structure
07:             Encapsulation 
07:             Duplication
07:             Separation of concerns
07:             Incremental development
07:         CRUD Operations
07:             CREATE
07:             READ
07:             UPDATE
07:             DELETE
07:         Tools
07:             Using Version Control
07:             Create repo
07:             Make changes
07:             Commit changes
07:             Pull
07:             Push
07:             Show changes
07:         Build
07:             Go to [Github.com](http://github.com) and login
07:             Create your copy of the BACS_350 repo
07:             View source code in repo
07:             Edit your db.php
07:             Create project/07/index.php
07:             Link to Github Repos
07:             Connect to Database
07:             Submit the page in Canvas
08:     Lesson 8
08:             Today - Live Coding Demo
08:         Requirements
08:             Project Description
08:             User Views:
08:             Iterative Development
08:         Build
08:             Clone Local repository
08:             Pull fresh code
08:             Setup Workflow
08:             Fix up todo.php
08:             Commit all changes
08:             Stylish page
08:             Validate HTML
08:             Connect to Database
08:             Refactor Connection
08:             Show subscribers
08:             Create add view
08:             Build form for input
08:             Extract data from POST
08:             Automatically show subscribers
08:             Commit all changes
08:             Submit your URL in Canvas
09:     Lesson 9
09:             Review
09:             Next Steps
09:         Version Control
09:             Critical tools
09:             Version control
09:             Git Skills
09:         Testing
09:             Basic Idea of Testing
09:             Test Case
09:             Test Coverage
09:             Test Life Cycle
09:             Start with Manual Testing
09:         Pair Programming
09:             How it works
09:             Teams  9-10
09:             Today's Assignment
09:             Iterations
09:         Build
09:             Pull request for fresh code
09:             Create a test page
09:             Add test code to project/09/index.php
09:             Link to test page
09:             Modify test.php to Validate Automatically
09:             Setup Variable to URL
09:             Automatic Valadation
09:             Submit into Canvas
10:     Lesson 10
10:             Review
10:             Next Steps
10:         Skills Learned
10:             Technology Skills
10:             Engineering
10:             Database Skills
10:         Project Planning
10:             Application Project
10:             My Goal
10:             Project Plan
10:             Prime Directive
10:             Requirements
10:             User Experience
10:             Technology
10:             Milestones
10:         Build
10:             Build the Subscribers App
10:             Work in Pairs from Monday
10:             After each Milestone
10:             Files when Complete
10:             Submit URL to Canvas
11:     Lesson 11
11:             Review
11:             Next Steps
11:         Strings
11:             Use single quotes for simple strings
11:             String Concatonation
11:             Use variables
11:             Double quotes for variable expansion
11:             Dates - Reading the time
11:             Dates - Short Format
11:             Dates - Long Format
11:             Current Time
11:             Print Current Time
11:             Read about date formatting
11:         Test
11:             Domain URL
11:             Page URL
11:             Test link
11:             Validate link
11:         Logger
11:             Create a new table in subscribers database
11:             Create new project
11:             Connect to database
11:             Show contents of log table
11:             Add a log record
11:             Verify that new records are added
11:             Develop index.php
11:             Set a variable for the text message
11:             Create test page
11:             Submit link for project/11/test.php
12:     Lesson 12
12:             Review
12:             Next Steps
12:         Solutions to Projects
12:             Core Skills
12:             Exam on Friday
12:             Example Exam (not the real thing)
12:         Apache Web Server
12:             Setup on Home Computer
12:             Configure Apache
12:             Configure phpMyAdmin
12:             Server Start Up
12:             Move Web Documents
12:             Setup Apache & MySQL
13:     BACS 350 - Lesson 13
13:             Review
13:             Next Steps
13:         Apps
13:             Start with the assets you have
13:             Milestones
13:             App Milestones
13:         Exam
13:             Practice for Exam
13:             App Requirements
13:             Use code from before
13:             Practical suggestions for Exam
13:         Build
13:             Build an app that manages books
13:             App Requirements
14:             Overview
14:             Grading
14:             Review
14:             Next Steps
14:         App Design
14:             Every app has a design
14:             Refactoring
14:             How to Refactor
14:             Process for Refactoring
14:         CRUD Functions
14:             Limits of File Includes
14:             Learn programming by programming
14:             Steps to MVC
14:             MVC Design Pattern
14:             Project     17 - due Friday
14:         eBook
14:             Interactive Learning Tool
14:             New Tool for Interactive Learning
14:             New Rhythm for Class
14:             Getting Started
14:             Assignments
15:             Types of Knowledge
15:             Design Patterns
15:             Catalog of Patterns
15:             Include Pattern
15:             Header/Footer Pattern
15:             Page Pattern
15:             CRUD Pattern
15:             CRUD operations for a datatype
15:             View Pattern
15:             Presentation layer
15:             Controller Pattern
15:             Acts on verbs to perform actions
15:             Transforming code into MVC
16:             Review
16:             Next Steps
16:         Integration
16:             Setup for development
16:             Building an App
16:             Milestones
16:             Work on Your Own
16:             Requirements for Getting My Help
16:         Milestones
16:             1. Create new project
16:             2. Create app page
16:             3. Create database connection
16:             4. Create subscriber CRUD
16:             5. Create subscriber Views
16:             6. Create subscriber Controller
17:             Review
17:             Next Steps
17:         Arrays
17:             Simple Arrays
17:             Associative Arrays
17:         Files
17:             File Exists
17:             Enumerate Directory Contents
17:             Build a List
17:             Reading a file
17:         File Viewer
18:             Review
18:         App Milestones
18:             Milestones
18:             1. PROJECT
18:             2. PAGE
18:             3. DATA
18:             4. VIEWS
18:             5. CONTROLLER
19:             Review
19:             Next Steps
19:         Objects
19:             Simpler is Better
19:             Objects have both code and data
19:             Start with Solution 14
19:             Define class for Subscriber list
19:             Create a database connection
19:             Establish the connection
19:             Automatically connect
19:             Do a query
19:             Show the list
19:             Move to subscriber.php
19:             Simple usage
19:         Bear Notes
19:             Use everything we've learned
19:             Bear Notes App Requirements
19:             Bear Notes App Requirements
19:             Bear Notes App Requirements
20:             Review
20:             Next Steps
20:         Caching
20:             Caching Problem
20:             Manual Flushing of Cache
20:             Add information to HTTP Header
20:             Communicate with the browser
20:             Example Code
20:         Files and Directories
20:             Directory Exists
20:             File Exists
20:             Enumerate Files & Directories
20:             Iterate over files
20:             Read File
20:             Display as HTML Text
20:             Write Text to File
20:             Source Code Browser
21:             Review
21:             Next Steps
21:         Pair Programming
21:             Team up with a partner
21:             Meet all Requirements
22:             Review
22:             Next Steps
22:         Controller
22:             Limitation of current solution
22:             insert.php
22:             insert.php
22:             Add Form
22:             Use Main Page to Add
22:             Add in the Main Page
22:             Object Handler
22:             Controller for Subscribers View
22:             Sample Code
22:             Project 22
23:             Review
23:             Next Steps
23:         Templates
23:             Limitation of current solution
23:             1 - Simple Text Replacement
23:             2 - Read Template File
23:             3 - Replace Text
23:             4 - Transform Article
23:             5 - Render Article
23:             6 - Article Settings
23:             7 - Transform Text
23:             8 - Render Template
23:             solution/23/views.php
23:             templates/views.php
23:         Build
23:             Create project/23
23:             Create HTML template file
24:             Review
24:             Next Steps
24:         Page Templates
24:             Simple HTML Template
24:             Simple HTML Template
24:             Simple HTML Template
24:             Read Page Template
24:             Page Template
24:             Page Template
24:         Build
24:             Create project/24
24:             Create page from template
24:             Create your own HTML
24:             Debug page logging utility
24:             Submit your URL in Canvas
25:             Review
25:             Next Steps
25:         View Templates
25:             Read Page Template
25:             Page Template
25:             Problem
25:             Create Functions
25:             Create Lists with Code
25:             Create Tables with Code
25:             Create table of links
25:             Include HTML Directly
25:             Read template from a file
25:             Join List Items
25:             Join List Items
25:             Automatically Handle Lists
25:         Build
25:             Study new template code
25:             Create project/25
25:             Directory Listing
25:             Project Listing
25:             Add page logging
25:             Customize Your Stylesheet
25:             Submit your URL in Canvas
26:             Review
26:             Next Steps
26:         Error Handling
26:             Things go wrong
26:             PHP Mechanisms for Errors
26:             Parsing Errors - nothing you can do
26:             Error Handlers
26:             Define your own handler
26:             Exception Handling - build recovery paths
26:         CRUD Templates
26:             CRUD Demos
26:             Each View
26:             Code Walkthrough of Each View
27:             Review
27:             Next Steps
27:         Cookies
27:             Set a Cookie
27:             Read a Cookie
27:             Initialize the Cookie
27:             Cookies Are Remembered Forever
27:             Sessions are Reset When Browser Closes
27:             Check the Session Cookie
27:             Demo Code
28:             Real-world Projects
28:             Traditional Lifecycle
28:             Impossible to know the Requirements
28:             Incremental Development
28:             Huge Productivity Difference
28:         Exam 2
28:             Follow up on Exam 2
28:             Frequently Unmet Requirements
28:             URL Requirements
28:             Music Display
28:             Additional Opportunity
29:             Review
29:             Next Steps
29:             Work Together
29:             Pairs
29:         Milestones
29:             Milestone 1 - Page Template
29:             Milestone 2 - Album Template
29:             Milestone 3 - Logging
29:             Milestone 4 - Data Operations
29:             Milestone 5 - Controller
29:             Milestone 6 - Testing
30:             Review
30:             Next Steps
30:             Work Together
30:             Pairs
30:         Milestones
30:             Milestones for Last Session
30:             Milestone 7 - Edit Record
30:             Milestone 8 - Object Framework
30:             Milestone 9 - Full App
30:         Resources
30:             Update Records
30:             templates/crud_read.php
30:             templates/crud_update.php
30:             templates/crud_delete.php
30:             templates/email_list.php
30:             templates/subscriber.php
30:             templates/subscriber-add-only.php
30:             solution/28
30:             solution/29
31:             Review
31:             Data Encapsulation
31:             Template "subscriber.php"
31:             Object Class
31:             Object Abstraction
31:             Data Controller
31:             Data Controller
31:             Data Controller
31:             Data Controller
31:             Handle Actions
32:             Review
32:             User Auth
32:             Overall Workflow
32:             Create a password
32:             Register User
32:             Verify a password
32:             Remember login session
32:             Require login
32:             Auth.php
32:             Register User Form
32:         Application Security
32:             Build a Set of Secure Pages
32:             Create a User ID and Password
32:             Register the User in the Database
32:             Build Login view
32:             Implement logout
32:             Create an unsecured page
33:             Review
33:             Auth Workflow
33:         Brain App
33:             Brain App - Projects
33:             Brain App - Motivation
33:             Brain App - Components
33:         Notes
33:             Technical Requirements - Site
33:             Technical Requirements - Notes App
33:             Design Reviews
33:             Design Updates
34:             Review
34:             Auth Workflow
34:             Auth - Working Demos
34:             Brain - Working Demos
34:             Notes - Working Demos
34:         Design Reviews
34:             Technical Requirements - Site
34:             Technical Requirements - Notes App
34:             Design Review Groups
34:             Design Reviews
34:             Complete the Following Scorecard
34:             Submit Your Review
34:             Broken Apps
35:             Design Review App
35:             Data
35:             Views
35:             Code structure
35:             Design Reviews
36:             Almost Finished with BACS 350
36:             App Projects
36:             Design Reviews
36:             Design Review Grading
36:         Markdown
36:             Why not HTML?
36:             Markup/Markdown
36:             Markdown
36:         Heading
36:             Markdown Cheatsheet
36:         Reveal.JS
36:             Motivation
36:             Slides Show App
36:             Create your own
36:             Slide Show App
36:             Data
36:             Views
36:             Code structure
36:             Design Reviews
37:             Last Days of BACS 350
37:         App Review
37:             App Reviews
37:             Design Review System
37:             Conduct Your Scheduled Reviews
37:             Testing
37:             Test Cases
37:             Summarize Your Findings
37:             Scorecard
37:             Review Brain on Nov 26
37:             Fix the Problems
37:             Get Ready for Other Apps
37:             Final Review
38:             Last Days of BACS 350
38:         Software Testing
38:             Key Question
38:             Codify the requirements
38:             Incremental Development
38:             What you build today should get value tomorrow
39:             Accomplishments
39:             Finish Strong
39:             End is another Beginning 
39:             Novice to Competent
39:             Technologies
39:             Tools
39:             Application
39:             Building Apps
39:             Projects
39:             Move Forward
39:             Build Personal Habits
