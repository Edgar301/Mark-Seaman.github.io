BACS 350 - Lesson25

* Complex Page Rendering
* Friday, Oct 19, 2018
* by Mark Seaman

![](img/Bear_Logo.png)



### Review
* Simple HTML Template
    * Read HTML
    * Define page options
    * Replace text in template
* Page Template Design


### Next Steps
* View Templates - Build complex pages by assembling views



## View Templates

### Read Page Template
Define a page template with spot for settings

```
$text = file_get_contents("page.html");

<!DOCTYPE html>
<html lang="en">
    <head>

        <meta charset="UTF-8">
        <title>{{ page_title }}</title>

        <link rel="stylesheet" href="style.css">

    </head>
    <body>

        <header>
            <img src="Bear.png" alt="Bear Logo"/>
            <h1>{{ site_title }}</h1>
            <h2>{{ page_title }}</h2>
        </header>
        <main>

            {{ content }}

        </main>
    </body>
</html>
```


### Page Template
Define settings to replace chunks of text

```
$settings = array("page_title" => "Page Templates",
                  "site_title" => "BACS 200 Demos");

$text = render_page($settings);

```


### Problem
Too much extra work to create a template for simple HTML snippets


```
<a href="{{ url }}"> {{ text }}</a>

```


### Create Functions
Build simple strings directly

```
function render_link($text, $url) {
    return "<a href=\"$url\">$text</a>";
}

$link = render_link($text, $url);
```


### Create Lists with Code
Build aggregate strings directly

```
    function render_list($list) {
        $s = '<ul>';
        foreach($list as $i) {
            $s .= render_template('list.html', array('item' => $i));
        }
        $s .= '</ul>';
        return $s;
    }

    $x = render_list(array ('a', 'b', 'c'));

```


### Create Tables with Code
Build aggregate strings directly

```
    function render_table($table) {
        $s = '<table>';
        foreach($table as $row) {
            $s .= '<tr><td>' . implode('</td><td>', $row) . '</td></tr>';
        }
        $s .= '</table>';
        return $s;
    }

    $x = render_list(array (array ('a', 'b'), array ('d', 'f')));

```


### Create table of links
Nest higher function on top of lower ones

```
    function render_links($list) {
        $s = '<ul>';
        foreach($list as $i) {
            $s .= "<li>" . render_link($i, $i) . "</li>";
        }
        $s .= '</ul>';
        return $s;
    }
```


### Include HTML Directly
Works well for simple templates

```
    function render_card($title, $body) {
        $template = '
            <div class="card">

                <div class="card-header">
                    <h2>{{ title }}</h2>
                </div>

                <div class="card-body card-padding">
                    {{ body }}
                </div>
            </div>';
        $settings = array('title' => $title, 'body' => $body);
        return transform_text($template, $settings);
    }
```



### Read template from a file
Render template "card.html"

```
    function render_card($title, $body) {
        $template = file_get_contents("card.html");
        $settings = array('title' => $title, 'body' => $body);
        return transform_text($template, $settings);
    }
```


### Join List Items
Implode does a string join

```
$a = array("Bob", "Sally", "Cindy");
echo implode(', ', $a);

"Bob, Sally, Cindy"
```


### Join List Items
Implode does a string join

```
$a = array("Bob", "Sally", "Cindy");
echo '<p>' . implode('</p><p>', $a) . '</p>';

"<p>Bob</p><p>Sally</p><p>Cindy</p>"
```


### Automatically Handle Lists
Pass in multiple items to put into lists

```
    function render_article($title, $paragraphs) {
        $body = implode('</p><p>', $paragraphs);
        $settings = array('title' => $title, 'body' => $body);
        $text = transform_text('<h3>{{ title }}</h3><p>{{ body }}</p>', $settings);
        return $text;
    }
```



## Build


### Study new template code
* Pull the code templates from Mark's Repo
* Study view.php, files.php, log.php
* You will need to understand these files to complete this assignment


### Create project/25
* Create a page (index.php)
* Use render_page ($settings) to create your page
* Use render_article ($settings) to add content to your page
* Commit your code "Basic Page"


### Directory Listing
* Use get_file_list() from files.php template
* List the directory contents of '.'
* Use render_list() to render a list
* Use render_links() to render a list of links to your files
* Commit your code "Directory listing"


### Project Listing
* Use get_dir_list() from files.php template
* List the directory contents of '../../project'
* Use render_list() to render a list
* Use render_links() to render a list of links to your files
* Commit your code "Project listing"


### Add page logging
* Add a log entry for each page load of "project/25"
* Make a link to the page history
* Commit your code "Page logging"


### Customize Your Stylesheet
* Customize your page.html so that you can pass in a stylesheet
* Use Bootstrap as your style
    https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'
* Commit your code "Bootstrap"


### Submit your URL in Canvas
* Finish this on time
* The next lessons will be built on this one

